#pragma version 10

smart_contracts.digital_marketplace.contract.DigitalMarketplace.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // smart_contracts/digital_marketplace/contract.py:20
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@10
    method "set_price(uint64)void"
    method "bootstrap(asset,uint64,pay)void"
    method "buy(pay,uint64)void"
    method "withdraw_and_delete(asset)void"
    txna ApplicationArgs 0
    match main_set_price_route@4 main_bootstrap_route@5 main_buy_route@6 main_withdraw_and_delete_route@7
    err // reject transaction

main_set_price_route@4:
    // smart_contracts/digital_marketplace/contract.py:64
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:20
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/digital_marketplace/contract.py:64
    // @arc4.abimethod
    callsub set_price
    int 1
    return

main_bootstrap_route@5:
    // smart_contracts/digital_marketplace/contract.py:103
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:20
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/digital_marketplace/contract.py:103
    // @arc4.abimethod
    callsub bootstrap
    int 1
    return

main_buy_route@6:
    // smart_contracts/digital_marketplace/contract.py:160
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:20
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // smart_contracts/digital_marketplace/contract.py:160
    // @arc4.abimethod
    callsub buy
    int 1
    return

main_withdraw_and_delete_route@7:
    // smart_contracts/digital_marketplace/contract.py:212-213
    // # 문제 5 시작
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    int DeleteApplication
    ==
    assert // OnCompletion is DeleteApplication
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:20
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/digital_marketplace/contract.py:212-213
    // # 문제 5 시작
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    callsub withdraw_and_delete
    int 1
    return

main_bare_routing@10:
    // smart_contracts/digital_marketplace/contract.py:20
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.set_price(unitary_price: uint64) -> void:
set_price:
    // smart_contracts/digital_marketplace/contract.py:64-65
    // @arc4.abimethod
    // def set_price(self, unitary_price: UInt64) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:66-67
    // # 문제 2 시작
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:69
    // assert self.bootstrapped == True
    int 0
    byte "bootstrapped"
    app_global_get_ex
    assert // check bootstrapped exists
    int 1
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:71
    // self.unitary_price = unitary_price
    byte "unitary_price"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.bootstrap(asset: uint64, unitary_price: uint64, mbr_pay: uint64) -> void:
bootstrap:
    // smart_contracts/digital_marketplace/contract.py:103-106
    // @arc4.abimethod
    // def bootstrap(
    //     self, asset: Asset, unitary_price: UInt64, mbr_pay: gtxn.PaymentTransaction
    // ) -> None:
    proto 3 0
    // smart_contracts/digital_marketplace/contract.py:107-108
    // # 문제 3 시작
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:110
    // assert not Global.current_application_address.is_opted_in(asset)
    global CurrentApplicationAddress
    frame_dig -3
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // smart_contracts/digital_marketplace/contract.py:116
    // assert mbr_pay.amount == Global.min_balance + Global.asset_opt_in_min_balance
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:118
    // assert mbr_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:120-124
    // itxn.AssetTransfer(
    //     asset_receiver = Txn.sender,
    //     asset_amount = 0,
    //     xfer_asset=asset
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:121
    // asset_receiver = Txn.sender,
    txn Sender
    frame_dig -3
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:122
    // asset_amount = 0,
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    // smart_contracts/digital_marketplace/contract.py:120
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:120-124
    // itxn.AssetTransfer(
    //     asset_receiver = Txn.sender,
    //     asset_amount = 0,
    //     xfer_asset=asset
    // ).submit()
    itxn_submit
    // smart_contracts/digital_marketplace/contract.py:126
    // self.asset_id = asset.id
    byte "asset_id"
    frame_dig -3
    app_global_put
    // smart_contracts/digital_marketplace/contract.py:128
    // self.unitary_price = unitary_price
    byte "unitary_price"
    frame_dig -2
    app_global_put
    // smart_contracts/digital_marketplace/contract.py:130
    // self.bootstrapped = True
    byte "bootstrapped"
    int 1
    app_global_put
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.buy(buyer_txn: uint64, quantity: uint64) -> void:
buy:
    // smart_contracts/digital_marketplace/contract.py:160-165
    // @arc4.abimethod
    // def buy(
    //     self,
    //     buyer_txn: gtxn.PaymentTransaction,
    //     quantity: UInt64,
    // ) -> None:
    proto 2 0
    // smart_contracts/digital_marketplace/contract.py:166-167
    // # 문제 4 시작
    // assert self.unitary_price > 0
    int 0
    byte "unitary_price"
    app_global_get_ex
    assert // check unitary_price exists
    assert
    // smart_contracts/digital_marketplace/contract.py:169
    // assert buyer_txn.sender == Txn.sender
    frame_dig -2
    gtxns Sender
    dup
    txn Sender
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:171
    // assert buyer_txn.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:173
    // assert buyer_txn.amount == self.unitary_price * quantity
    frame_dig -2
    gtxns Amount
    int 0
    byte "unitary_price"
    app_global_get_ex
    assert // check unitary_price exists
    frame_dig -1
    *
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:175-180
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_amount = quantity,
    //     asset_receiver = buyer_txn.sender,
    //     fee = 0
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:176
    // xfer_asset=self.asset_id,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    swap
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field AssetAmount
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:175
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/digital_marketplace/contract.py:179
    // fee = 0
    int 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:175-180
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_amount = quantity,
    //     asset_receiver = buyer_txn.sender,
    //     fee = 0
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.withdraw_and_delete(asset: uint64) -> void:
withdraw_and_delete:
    // smart_contracts/digital_marketplace/contract.py:212-214
    // # 문제 5 시작
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    // def withdraw_and_delete(self, asset: Asset) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:216
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:225
    // receiver=Txn.sender,
    txn Sender
    // smart_contracts/digital_marketplace/contract.py:220-226
    //     asset_receiver=Txn.sender,
    //     asset_close_to=Txn.sender
    // )
    // 
    // profitParams = itxn.Payment(
    //     receiver=Txn.sender,
    //     close_remainder_to=Txn.sender
    dupn 3
    // smart_contracts/digital_marketplace/contract.py:229
    // itxn.submit_txns(assetParams, profitParams)
    itxn_begin
    itxn_field AssetCloseTo
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:218
    // assetParams = itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:229
    // itxn.submit_txns(assetParams, profitParams)
    itxn_next
    itxn_field CloseRemainderTo
    itxn_field Receiver
    // smart_contracts/digital_marketplace/contract.py:224
    // profitParams = itxn.Payment(
    int pay
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:229
    // itxn.submit_txns(assetParams, profitParams)
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.__init__() -> void:
__init__:
    // smart_contracts/digital_marketplace/contract.py:40
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/digital_marketplace/contract.py:41-42
    // # 문제 1 시작
    // self.asset_id = UInt64(0)
    byte "asset_id"
    int 0
    app_global_put
    // smart_contracts/digital_marketplace/contract.py:43
    // self.unitary_price = UInt64(0)
    byte "unitary_price"
    int 0
    app_global_put
    // smart_contracts/digital_marketplace/contract.py:44
    // self.bootstrapped = False
    byte "bootstrapped"
    int 0
    app_global_put
    retsub
