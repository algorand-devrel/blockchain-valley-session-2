#pragma version 10

smart_contracts.digital_marketplace.contract.DigitalMarketplace.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // smart_contracts/digital_marketplace/contract.py:20
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@10
    method "set_price(uint64)void"
    method "bootstrap(asset,uint64,pay)void"
    method "buy(pay,uint64)void"
    method "withdraw_and_delete()void"
    txna ApplicationArgs 0
    match main_set_price_route@4 main_bootstrap_route@5 main_buy_route@6 main_withdraw_and_delete_route@7
    err // reject transaction

main_set_price_route@4:
    // smart_contracts/digital_marketplace/contract.py:64
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:20
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/digital_marketplace/contract.py:64
    // @arc4.abimethod
    callsub set_price
    int 1
    return

main_bootstrap_route@5:
    // smart_contracts/digital_marketplace/contract.py:100
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:20
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/digital_marketplace/contract.py:100
    // @arc4.abimethod
    callsub bootstrap
    int 1
    return

main_buy_route@6:
    // smart_contracts/digital_marketplace/contract.py:150
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:20
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // smart_contracts/digital_marketplace/contract.py:150
    // @arc4.abimethod
    callsub buy
    int 1
    return

main_withdraw_and_delete_route@7:
    // smart_contracts/digital_marketplace/contract.py:200-201
    // # 문제 5 시작
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    int DeleteApplication
    ==
    assert // OnCompletion is DeleteApplication
    txn ApplicationID
    assert // is not creating
    callsub withdraw_and_delete
    int 1
    return

main_bare_routing@10:
    // smart_contracts/digital_marketplace/contract.py:20
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.set_price(unitary_price: uint64) -> void:
set_price:
    // smart_contracts/digital_marketplace/contract.py:64-65
    // @arc4.abimethod
    // def set_price(self, unitary_price: UInt64) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:66-67
    //  # 문제 2 시작
    // assert Txn.sender == Global.creator_address, "Only creator can opt in to ASA"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    // smart_contracts/digital_marketplace/contract.py:68
    // assert self.bootstrapped.value == True, "App Must be bootstrapped"
    int 0
    byte "bootstrapped"
    app_global_get_ex
    assert // check bootstrapped exists
    int 1
    ==
    assert // App Must be bootstrapped
    // smart_contracts/digital_marketplace/contract.py:69
    // self.unitary_price.value = unitary_price
    byte "unitary_price"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.bootstrap(asset: uint64, unitary_price: uint64, mbr_pay: uint64) -> void:
bootstrap:
    // smart_contracts/digital_marketplace/contract.py:100-103
    // @arc4.abimethod
    // def bootstrap(
    //     self, asset: Asset, unitary_price: UInt64, mbr_pay: gtxn.PaymentTransaction
    // ) -> None:
    proto 3 0
    // smart_contracts/digital_marketplace/contract.py:104-105
    // # 문제 3 시작
    // assert Txn.sender == Global.creator_address, "Only creator can opt in to ASA"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    // smart_contracts/digital_marketplace/contract.py:106
    // assert self.bootstrapped.value == False,  "App is already bootstrapped."
    int 0
    byte "bootstrapped"
    app_global_get_ex
    assert // check bootstrapped exists
    !
    assert // App is already bootstrapped.
    // smart_contracts/digital_marketplace/contract.py:107
    // assert mbr_pay.receiver == Global.current_application_address, "receiver must be the contract address"
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // receiver must be the contract address
    // smart_contracts/digital_marketplace/contract.py:108
    // assert mbr_pay.amount == (Global.min_balance + Global.asset_opt_in_min_balance), "Incorrect funding amount."
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert // Incorrect funding amount.
    // smart_contracts/digital_marketplace/contract.py:110
    // self.asset_id.value = (asset.id)
    byte "asset_id"
    frame_dig -3
    app_global_put
    // smart_contracts/digital_marketplace/contract.py:111
    // self.unitary_price.value = (unitary_price)
    byte "unitary_price"
    frame_dig -2
    app_global_put
    // smart_contracts/digital_marketplace/contract.py:112
    // self.bootstrapped.value = (True)
    byte "bootstrapped"
    int 1
    app_global_put
    // smart_contracts/digital_marketplace/contract.py:114-120
    // itxn.AssetTransfer(
    //     xfer_asset = self.asset_id.value,
    //     asset_receiver= Txn.sender,
    //     asset_sender= Global.current_application_address,
    //     asset_amount= UInt64(0),
    //     fee=0
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:115
    // xfer_asset = self.asset_id.value,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/digital_marketplace/contract.py:116
    // asset_receiver= Txn.sender,
    txn Sender
    // smart_contracts/digital_marketplace/contract.py:117
    // asset_sender= Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/digital_marketplace/contract.py:118
    // asset_amount= UInt64(0),
    int 0
    itxn_field AssetAmount
    itxn_field AssetSender
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:114
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/digital_marketplace/contract.py:119
    // fee=0
    int 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:114-120
    // itxn.AssetTransfer(
    //     xfer_asset = self.asset_id.value,
    //     asset_receiver= Txn.sender,
    //     asset_sender= Global.current_application_address,
    //     asset_amount= UInt64(0),
    //     fee=0
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.buy(buyer_txn: uint64, quantity: uint64) -> void:
buy:
    // smart_contracts/digital_marketplace/contract.py:150-155
    // @arc4.abimethod
    // def buy(
    //     self,
    //     buyer_txn: gtxn.PaymentTransaction,
    //     quantity: UInt64,
    // ) -> None:
    proto 2 0
    // smart_contracts/digital_marketplace/contract.py:156-157
    // # 문제 4 시작
    // assert self.unitary_price.value != UInt64(0), "Unitary price is not set."
    int 0
    byte "unitary_price"
    app_global_get_ex
    assert // check unitary_price exists
    assert // Unitary price is not set.
    // smart_contracts/digital_marketplace/contract.py:158
    // assert buyer_txn.sender == Txn.sender, "Payment transaction sender must be the caller."
    frame_dig -2
    gtxns Sender
    txn Sender
    ==
    assert // Payment transaction sender must be the caller.
    // smart_contracts/digital_marketplace/contract.py:159
    // assert buyer_txn.receiver == Global.current_application_address, "Receiver must be this app."
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Receiver must be this app.
    // smart_contracts/digital_marketplace/contract.py:160
    // assert buyer_txn.amount == self.unitary_price.value * quantity, "Incorrect payment amount."
    frame_dig -2
    gtxns Amount
    int 0
    byte "unitary_price"
    app_global_get_ex
    assert // check unitary_price exists
    frame_dig -1
    *
    ==
    assert // Incorrect payment amount.
    // smart_contracts/digital_marketplace/contract.py:162-168
    // itxn.AssetTransfer(
    //     xfer_asset = self.asset_id.value,
    //     asset_receiver= Txn.sender,
    //     asset_sender= Global.current_application_address,
    //     asset_amount= quantity,
    //     fee=0
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:163
    // xfer_asset = self.asset_id.value,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/digital_marketplace/contract.py:164
    // asset_receiver= Txn.sender,
    txn Sender
    // smart_contracts/digital_marketplace/contract.py:165
    // asset_sender= Global.current_application_address,
    global CurrentApplicationAddress
    frame_dig -1
    itxn_field AssetAmount
    itxn_field AssetSender
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:162
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/digital_marketplace/contract.py:167
    // fee=0
    int 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:162-168
    // itxn.AssetTransfer(
    //     xfer_asset = self.asset_id.value,
    //     asset_receiver= Txn.sender,
    //     asset_sender= Global.current_application_address,
    //     asset_amount= quantity,
    //     fee=0
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.withdraw_and_delete() -> void:
withdraw_and_delete:
    // smart_contracts/digital_marketplace/contract.py:200-202
    // # 문제 5 시작
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    // def withdraw_and_delete(self) -> None:
    proto 0 0
    // smart_contracts/digital_marketplace/contract.py:203
    // assert Txn.sender == Global.creator_address, "Only creator can opt in to ASA"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    // smart_contracts/digital_marketplace/contract.py:205-211
    // itxn.AssetTransfer(
    //     xfer_asset = self.asset_id.value,
    //     asset_receiver = Global.creator_address,
    //     asset_sender = Global.current_application_address,
    //     asset_close_to = Global.creator_address,
    //     fee=0
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:206
    // xfer_asset = self.asset_id.value,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/digital_marketplace/contract.py:207
    // asset_receiver = Global.creator_address,
    global CreatorAddress
    // smart_contracts/digital_marketplace/contract.py:208
    // asset_sender = Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/digital_marketplace/contract.py:209
    // asset_close_to = Global.creator_address,
    global CreatorAddress
    itxn_field AssetCloseTo
    itxn_field AssetSender
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:205
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/digital_marketplace/contract.py:210
    // fee=0
    int 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:205-211
    // itxn.AssetTransfer(
    //     xfer_asset = self.asset_id.value,
    //     asset_receiver = Global.creator_address,
    //     asset_sender = Global.current_application_address,
    //     asset_close_to = Global.creator_address,
    //     fee=0
    // ).submit()
    itxn_submit
    // smart_contracts/digital_marketplace/contract.py:213-218
    // itxn.Payment(
    //     receiver = Global.creator_address,
    //     sender = Global.current_application_address,
    //     close_remainder_to = Global.creator_address,
    //     fee=0
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:214
    // receiver = Global.creator_address,
    global CreatorAddress
    // smart_contracts/digital_marketplace/contract.py:215
    // sender = Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/digital_marketplace/contract.py:216
    // close_remainder_to = Global.creator_address,
    global CreatorAddress
    itxn_field CloseRemainderTo
    itxn_field Sender
    itxn_field Receiver
    // smart_contracts/digital_marketplace/contract.py:213
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/digital_marketplace/contract.py:217
    // fee=0
    int 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:213-218
    // itxn.Payment(
    //     receiver = Global.creator_address,
    //     sender = Global.current_application_address,
    //     close_remainder_to = Global.creator_address,
    //     fee=0
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.__init__() -> void:
__init__:
    // smart_contracts/digital_marketplace/contract.py:40
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/digital_marketplace/contract.py:41-42
    // # 문제 1 시작
    // self.asset_id = GlobalState(UInt64(0))
    byte "asset_id"
    int 0
    app_global_put
    // smart_contracts/digital_marketplace/contract.py:43
    // self.unitary_price = GlobalState(UInt64(0))
    byte "unitary_price"
    int 0
    app_global_put
    // smart_contracts/digital_marketplace/contract.py:44
    // self.bootstrapped = GlobalState(bool(False))
    byte "bootstrapped"
    int 0
    app_global_put
    retsub
